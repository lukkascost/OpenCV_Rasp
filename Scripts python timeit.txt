## Script para executar o timeit no GLCM N vezes repetindo R vezes com a imagem em 100%
python -m timeit -n 1 -r 2 "from Metodos import *" "GLCM(cv2.imread('DataBase/c1_1.JPG',0),1.0)"
	1 loops, best of 2: 34.2 sec per loop

## Script para verificar o tempo do GLCM de uma imagem por decimacao de 8 pixels(12.5%)
python -m timeit -n 1 -r 2 "from Metodos import *" "GLCM(resize_img(cv2.imread('DataBase/c1_1.JPG',0),8),1.0)"
	1 loops, best of 2: 3.29 sec per loop

## Script para verificar o tempo do resize de uma imagem por decimacao
python -m timeit -n 50 -r 2 "from Metodos import *" "resize_img(cv2.imread('DataBase/c1_1.JPG',0),8)"
	50 loops, best of 2: 351 msec per loop

## Script para verificar o tempo do imread de uma imagem
python -m timeit -n 50 -r 2 "from Metodos import *" "cv2.imread('DataBase/c1_1.JPG',0)"
	50 loops, best of 2: 186 msec per loop

## Script para verificar o tempo de Carregar o SVM
python -m timeit -n 50 -r 2 "from Metodos import *" "Vetores = cv2.SVM()" "Vetores.load('DataBase/SVM_Vectors.txt')"
	50 loops, best of 2: 2.67 msec per loop

## Script para verificar o tempo de predizer um resultado do SVM
python -m timeit -n 50 -r 2 "from Metodos import *" "Vetores = cv2.SVM()" "Vetores.load('DataBase/SVM_Vectors.txt')" "Vetores.predict(np.float32([0.256261103454, 0.379184082352, 0.787213513211, 0.0505347427256, 0.715921063662, 0.654824045497, 0.674770412745, 0.476744186047, 0.668162505003, 0.0798707420259]))"
	50 loops, best of 2: 2.68 msec per loop

##Script para verificar o tempo completo de RESIZE+GLCM+SVM
python -m timeit -n 50 -r 2 "from Metodos import *" "atr , label= GLCM(resize_img(cv2.imread('DataBase/c1_1.JPG',0),8),1.0)[:9], 1.0" "Vetores = cv2.SVM()" "Vetores.load('Resultados\INTER_LINEAR\SVM_Vectors100_73.62.txt')" "Vetores.predict(np.float32(atr))"
	50 loops, best of 2: 3.43 sec per loop

##Script para verificar o tempo completo de GLCM+SVM
python -m timeit -n 1 -r 2 "from Metodos import *" "atr , label= GLCM(cv2.imread('DataBase/c1_1.JPG',0),1.0)[:9], 1.0" "Vetores = cv2.SVM()" "Vetores.load('Resultados\INTER_LINEAR\SVM_Vectors100_73.62.txt')" "Vetores.predict(np.float32(atr))"
	1 loops, best of 2: 33.9 sec per loop